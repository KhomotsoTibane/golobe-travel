/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppLayoutImport } from './routes/_appLayout'
import { Route as IndexImport } from './routes/index'
import { Route as AppLayouthotelFlowHotelsIndexImport } from './routes/_appLayout/(hotelFlow)/hotels/index'
import { Route as AppLayouthotelFlowHotelsSearchResultsCityIndexImport } from './routes/_appLayout/(hotelFlow)/hotels/search-results/$city.index'

// Create/Update Routes

const AppLayoutRoute = AppLayoutImport.update({
  id: '/_appLayout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppLayouthotelFlowHotelsIndexRoute =
  AppLayouthotelFlowHotelsIndexImport.update({
    id: '/(hotelFlow)/hotels/',
    path: '/hotels/',
    getParentRoute: () => AppLayoutRoute,
  } as any)

const AppLayouthotelFlowHotelsSearchResultsCityIndexRoute =
  AppLayouthotelFlowHotelsSearchResultsCityIndexImport.update({
    id: '/(hotelFlow)/hotels/search-results/$city/',
    path: '/hotels/search-results/$city/',
    getParentRoute: () => AppLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_appLayout': {
      id: '/_appLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_appLayout/(hotelFlow)/hotels/': {
      id: '/_appLayout/(hotelFlow)/hotels/'
      path: '/hotels'
      fullPath: '/hotels'
      preLoaderRoute: typeof AppLayouthotelFlowHotelsIndexImport
      parentRoute: typeof AppLayoutImport
    }
    '/_appLayout/(hotelFlow)/hotels/search-results/$city/': {
      id: '/_appLayout/(hotelFlow)/hotels/search-results/$city/'
      path: '/hotels/search-results/$city'
      fullPath: '/hotels/search-results/$city'
      preLoaderRoute: typeof AppLayouthotelFlowHotelsSearchResultsCityIndexImport
      parentRoute: typeof AppLayoutImport
    }
  }
}

// Create and export the route tree

interface AppLayoutRouteChildren {
  AppLayouthotelFlowHotelsIndexRoute: typeof AppLayouthotelFlowHotelsIndexRoute
  AppLayouthotelFlowHotelsSearchResultsCityIndexRoute: typeof AppLayouthotelFlowHotelsSearchResultsCityIndexRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppLayouthotelFlowHotelsIndexRoute: AppLayouthotelFlowHotelsIndexRoute,
  AppLayouthotelFlowHotelsSearchResultsCityIndexRoute:
    AppLayouthotelFlowHotelsSearchResultsCityIndexRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AppLayoutRouteWithChildren
  '/hotels': typeof AppLayouthotelFlowHotelsIndexRoute
  '/hotels/search-results/$city': typeof AppLayouthotelFlowHotelsSearchResultsCityIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AppLayoutRouteWithChildren
  '/hotels': typeof AppLayouthotelFlowHotelsIndexRoute
  '/hotels/search-results/$city': typeof AppLayouthotelFlowHotelsSearchResultsCityIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_appLayout': typeof AppLayoutRouteWithChildren
  '/_appLayout/(hotelFlow)/hotels/': typeof AppLayouthotelFlowHotelsIndexRoute
  '/_appLayout/(hotelFlow)/hotels/search-results/$city/': typeof AppLayouthotelFlowHotelsSearchResultsCityIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/hotels' | '/hotels/search-results/$city'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/hotels' | '/hotels/search-results/$city'
  id:
    | '__root__'
    | '/'
    | '/_appLayout'
    | '/_appLayout/(hotelFlow)/hotels/'
    | '/_appLayout/(hotelFlow)/hotels/search-results/$city/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppLayoutRoute: AppLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_appLayout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_appLayout": {
      "filePath": "_appLayout.tsx",
      "children": [
        "/_appLayout/(hotelFlow)/hotels/",
        "/_appLayout/(hotelFlow)/hotels/search-results/$city/"
      ]
    },
    "/_appLayout/(hotelFlow)/hotels/": {
      "filePath": "_appLayout/(hotelFlow)/hotels/index.tsx",
      "parent": "/_appLayout"
    },
    "/_appLayout/(hotelFlow)/hotels/search-results/$city/": {
      "filePath": "_appLayout/(hotelFlow)/hotels/search-results/$city.index.tsx",
      "parent": "/_appLayout"
    }
  }
}
ROUTE_MANIFEST_END */
